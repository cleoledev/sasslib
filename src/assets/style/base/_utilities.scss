@use 'sass:string';
@use 'sass:map';
@use '../abstract/mixins' as m;

.text-invisible {
  font-size: 0;
  line-height: 0;
  color: transparent;
}

.position-center {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translateX(-50%) translateY(-50%);
}

// spacing
$max-space-amount: 100;
$space-range: 4;
$breakpoints: (sm, md);
$directions: (
  l: left,
  r: right,
  t: top,
  b: bottom,
  x: (left, right),
  y: (top, bottom)
);
$utilities: (
  width: (
    minmax: true,
    responsive: true
  ),
  height: (
    minmax: true,
    responsive: true
  ),
  margin: (
    negative: true,
    direction: true,
    responsive: true
  ),
  padding: (
    direction: true,
    responsive: true
  )
);

@mixin generate-utilities () {
  @each $prop, $config in $utilities {
    $responsive: map.get($config, responsive);
    // normal
    @include generate-space($prop, $config);
    // with breakpoints
    @if ($responsive == true) {
      @each $size in $breakpoints {
        $prefix: #{$size}\:;
        @include m.screen ($size) {
          @include generate-space($prop, $config, $prefix);
        }
      }
    }
  }
}

@mixin generate-space ($prop, $config, $prefix: '') {
  $has-direction: map.get($config, direction);
  $has-negative: map.get($config, negative);
  $has-minmax: map.get($config, minmax);

  @for $space from 0 through $max-space-amount {
    @if ($space <= 10 or $space % 4 == 0) {
      $class: #{$prefix}#{string.slice($prop, 1, 1)};
      // normal
      @include get-property-value(
        $class,
        $space,
        $prop,
        $space,
        $has-direction
      );
      // negative value
      @if ($has-negative == true) {
        $len: string.length($class);
        $class: string.insert($class, '-', ($len + 1) * -1);

        @include get-property-value(
          $class,
          $space,
          $prop,
          $space * -1,
          $has-direction
        );
      }

      // minmax
      @if ($has-minmax == true) {
        @each $p in (min, max) {
          $class: #{$prefix}#{$p}-#{string.slice($prop, 1, 1)};
          @include get-property-value($class, $space, $prop, $space);
        }
      }
    }
  }
}

@mixin get-property-value ($class, $space, $prop, $value, $has-direction: false) {
  .#{$class}-#{$space} {
    #{$prop}: #{$value}px;
  }

  @if ($has-direction == true) {
    @each $d, $sides in $directions {
      .#{$class}#{$d}-#{$space} {
        @each $side in $sides {
          #{$prop}-#{$side}: #{$value}px;
        }
      }
    }
  }
}

@include generate-utilities;